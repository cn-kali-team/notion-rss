# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: post-release
on:
  push:
    tags:
      - "v*"

env:
  BIN_NAME: notion-rss
jobs:
  create-release:
    name: notion-rss
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RELEASE_VERSION == ''
        run: |
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RELEASE_VERSION }}"
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Generate Release Notes
        run: |
          python3 .github/workflows/release-notes.py --tag ${{ env.RELEASE_VERSION }} --output notes-${{ env.RELEASE_VERSION }}.md
          cat notes-${{ env.RELEASE_VERSION }}.md
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          body_path: notes-${{ env.RELEASE_VERSION }}.md
  build-release:
    name: build-release
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        build: [ linux, macos, macos_m1, win-msvc ]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            file: notion-rss-amd64
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
            file: notion-rss-darwin
          - build: macos_m1
            os: macos-latest
            rust: stable
            target: aarch64-apple-darwin
            file: notion-rss-aarch64-darwin
          - build: win-msvc
            os: windows-latest
            rust: stable
            target: i686-pc-windows-msvc
            file: notion-rss.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Cache
        uses: Swatinem/rust-cache@v1
      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends xz-utils liblz4-tool libssl-dev musl-tools pkg-config libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf openssl
      - name: Install packages (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          choco install llvm openssl
          export CARGO_PKG_VERSION=`date +'%-Y.%-m.%-d'`
          echo "CARGO_PKG_VERSION=`date +'%Y.%m.%d'`" >>$GITHUB_ENV
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >>$GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >>$GITHUB_ENV
      - name: Install packages (Macos)
        if: matrix.os == 'macos-latest'
        run: |
          echo "CARGO_PKG_VERSION=`date +'%Y.%m.%d'`" >>$GITHUB_ENV
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
        publish-release:
          permissions:
            contents: write
          runs-on: ubuntu-20.04
          needs: [create-release, build-tauri]

          steps:
            - name: publish release
              id: publish-release
              uses: actions/github-script@v6
              env:
                release_id: ${{ needs.create-release.outputs.release_id }}
              with:
                script: |
                  github.rest.repos.updateRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: process.env.release_id,
                    draft: false,
                    prerelease: false
                  })