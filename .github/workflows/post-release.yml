# The way this works is the following:
#
# The create-release job runs purely to initialize the GitHub release itself
# and to output upload_url for the following job.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL from create-release job outputs, then builds the release
# executables for each supported platform and attaches them as release assets
# to the previously created release.
#
# The key here is that we create the release only once.
#
# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/

name: post-release
on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: |
          sed -i -e "s/\"version\": \".*/\"version\": \"`date +'%-Y.%-m.%-d'`\",/" package.json
          sed -i -e "s/^version = .*/version = \"`date +'%-Y.%-m.%-d'`\"/" src-tauri/Cargo.toml
          echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: false,
              prerelease: false
            })
            return data.id
  build-tauri:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [ linux, macos, win-msvc ]
        include:
          - platform: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - platform: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - platform: win-msvc
            os: windows-latest
            rust: stable
            target: i686-pc-windows-msvc
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn' # Set this to npm, yarn or pnpm.
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib xz-utils liblz4-tool libc6-dev libssl-dev musl-tools pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          sed -i -e "s/\"version\": \".*/\"version\": \"`date +'%-Y.%-m.%-d'`\",/" package.json
          sed -i -e "s/^version = .*/version = \"`date +'%-Y.%-m.%-d'`\"/" src-tauri/Cargo.toml
      - name: Install packages (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          choco install llvm openssl
          export CARGO_PKG_VERSION=`date +'%-Y.%-m.%-d'`
          sed -i -e "s/\"version\": \".*/\"version\": \"`date +'%-Y.%-m.%-d'`\",/" package.json
          sed -i -e "s/^version = .*/version = \"`date +'%-Y.%-m.%-d'`\"/" src-tauri/Cargo.toml
          echo "CARGO_PKG_VERSION=`date +'%Y.%m.%d'`" >>$GITHUB_ENV
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL-Win64" >>$GITHUB_ENV
          echo "RUSTFLAGS=-C target-feature=+crt-static" >>$GITHUB_ENV
      - name: Install packages (Macos)
        if: matrix.os == 'macos-latest'
        run: |
          sed -i -e "s/^version = .*/version = \"`date +'%-Y.%-m.%-d'`\"/" src-tauri/Cargo.toml
          sed -i -e "s/\"version\": \".*/\"version\": \"`date +'%-Y.%-m.%-d'`\",/" package.json
      - name: install frontend dependencies
        run: yarn install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CXXFLAGS: --std=c++14
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [ create-release, build-tauri ]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })